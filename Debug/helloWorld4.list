
helloWorld4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f34  08000f34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000f44  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000f44  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005a8b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000117c  00000000  00000000  00025ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001777  00000000  00000000  00026c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004c8  00000000  00000000  000283c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000540  00000000  00000000  00028888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000231e  00000000  00000000  00028dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001ea6  00000000  00000000  0002b0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002cf8c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000a28  00000000  00000000  0002d008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ed8 	.word	0x08000ed8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000ed8 	.word	0x08000ed8

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <HAL_InitTick+0x40>)
{
 80001cc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	b908      	cbnz	r0, 80001d6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80001d2:	2001      	movs	r0, #1
 80001d4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001d6:	4a0d      	ldr	r2, [pc, #52]	; (800020c <HAL_InitTick+0x44>)
 80001d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e0:	6810      	ldr	r0, [r2, #0]
 80001e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e6:	f000 f891 	bl	800030c <HAL_SYSTICK_Config>
 80001ea:	4604      	mov	r4, r0
 80001ec:	2800      	cmp	r0, #0
 80001ee:	d1f0      	bne.n	80001d2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f0:	2d0f      	cmp	r5, #15
 80001f2:	d8ee      	bhi.n	80001d2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f4:	4602      	mov	r2, r0
 80001f6:	4629      	mov	r1, r5
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f000 f852 	bl	80002a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <HAL_InitTick+0x48>)
 8000202:	4620      	mov	r0, r4
 8000204:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000206:	bd38      	pop	{r3, r4, r5, pc}
 8000208:	20000000 	.word	0x20000000
 800020c:	20000008 	.word	0x20000008
 8000210:	20000004 	.word	0x20000004

08000214 <HAL_Init>:
{
 8000214:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000216:	2003      	movs	r0, #3
 8000218:	f000 f832 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800021c:	2000      	movs	r0, #0
 800021e:	f7ff ffd3 	bl	80001c8 <HAL_InitTick>
 8000222:	4604      	mov	r4, r0
 8000224:	b918      	cbnz	r0, 800022e <HAL_Init+0x1a>
    HAL_MspInit();
 8000226:	f000 fdbb 	bl	8000da0 <HAL_MspInit>
}
 800022a:	4620      	mov	r0, r4
 800022c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800022e:	2401      	movs	r4, #1
 8000230:	e7fb      	b.n	800022a <HAL_Init+0x16>
	...

08000234 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4904      	ldr	r1, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6813      	ldr	r3, [r2, #0]
 800023a:	6809      	ldr	r1, [r1, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfad      	iteet	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f4:	bfb5      	itete	lt
 80002f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030c:	3801      	subs	r0, #1
 800030e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000312:	d20a      	bcs.n	800032a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	21f0      	movs	r1, #240	; 0xf0
 800031c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e010 	.word	0xe000e010
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800033c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800033e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80004ec <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000344:	4c67      	ldr	r4, [pc, #412]	; (80004e4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000346:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000348:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	40da      	lsrs	r2, r3
 800034e:	d102      	bne.n	8000356 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000350:	b005      	add	sp, #20
 8000352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000356:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000358:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800035a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 800035c:	ea12 0e06 	ands.w	lr, r2, r6
 8000360:	f000 80b1 	beq.w	80004c6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000364:	684a      	ldr	r2, [r1, #4]
 8000366:	f022 0710 	bic.w	r7, r2, #16
 800036a:	2f02      	cmp	r7, #2
 800036c:	d116      	bne.n	800039c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800036e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000372:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000376:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800037a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800037e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000382:	f04f 0c0f 	mov.w	ip, #15
 8000386:	fa0c fc0a 	lsl.w	ip, ip, sl
 800038a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800038e:	690d      	ldr	r5, [r1, #16]
 8000390:	fa05 f50a 	lsl.w	r5, r5, sl
 8000394:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000398:	f8c9 5020 	str.w	r5, [r9, #32]
 800039c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80003a0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003a2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80003a6:	fa05 f50c 	lsl.w	r5, r5, ip
 80003aa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003ac:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80003b0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003b4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003ba:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c4:	d811      	bhi.n	80003ea <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80003c8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80003cc:	68cf      	ldr	r7, [r1, #12]
 80003ce:	fa07 f70c 	lsl.w	r7, r7, ip
 80003d2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80003d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80003da:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80003de:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80003e2:	409f      	lsls	r7, r3
 80003e4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80003e8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80003ea:	f1ba 0f03 	cmp.w	sl, #3
 80003ee:	d107      	bne.n	8000400 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80003f0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80003f2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80003f6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80003fa:	409f      	lsls	r7, r3
 80003fc:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80003fe:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000400:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000402:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000404:	688e      	ldr	r6, [r1, #8]
 8000406:	fa06 f60c 	lsl.w	r6, r6, ip
 800040a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800040c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800040e:	00d5      	lsls	r5, r2, #3
 8000410:	d559      	bpl.n	80004c6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000416:	f045 0501 	orr.w	r5, r5, #1
 800041a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800041e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000422:	f023 0603 	bic.w	r6, r3, #3
 8000426:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800042a:	f005 0501 	and.w	r5, r5, #1
 800042e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000432:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000434:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000438:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800043a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800043c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000440:	270f      	movs	r7, #15
 8000442:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000446:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800044a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800044e:	d03c      	beq.n	80004ca <HAL_GPIO_Init+0x192>
 8000450:	4d25      	ldr	r5, [pc, #148]	; (80004e8 <HAL_GPIO_Init+0x1b0>)
 8000452:	42a8      	cmp	r0, r5
 8000454:	d03b      	beq.n	80004ce <HAL_GPIO_Init+0x196>
 8000456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045a:	42a8      	cmp	r0, r5
 800045c:	d039      	beq.n	80004d2 <HAL_GPIO_Init+0x19a>
 800045e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000462:	42a8      	cmp	r0, r5
 8000464:	d037      	beq.n	80004d6 <HAL_GPIO_Init+0x19e>
 8000466:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046a:	42a8      	cmp	r0, r5
 800046c:	d035      	beq.n	80004da <HAL_GPIO_Init+0x1a2>
 800046e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000472:	42a8      	cmp	r0, r5
 8000474:	d033      	beq.n	80004de <HAL_GPIO_Init+0x1a6>
 8000476:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047a:	42a8      	cmp	r0, r5
 800047c:	bf14      	ite	ne
 800047e:	2507      	movne	r5, #7
 8000480:	2506      	moveq	r5, #6
 8000482:	fa05 f50c 	lsl.w	r5, r5, ip
 8000486:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000488:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800048a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800048c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000490:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000492:	bf54      	ite	pl
 8000494:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000496:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800049a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800049c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 80004a0:	bf54      	ite	pl
 80004a2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80004a4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80004a8:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80004aa:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004ac:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 80004ae:	bf54      	ite	pl
 80004b0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80004b2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80004b6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80004b8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ba:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 80004bc:	bf54      	ite	pl
 80004be:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80004c0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80004c4:	60e5      	str	r5, [r4, #12]
    position++;
 80004c6:	3301      	adds	r3, #1
 80004c8:	e73f      	b.n	800034a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80004ca:	2500      	movs	r5, #0
 80004cc:	e7d9      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004ce:	2501      	movs	r5, #1
 80004d0:	e7d7      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004d2:	2502      	movs	r5, #2
 80004d4:	e7d5      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004d6:	2503      	movs	r5, #3
 80004d8:	e7d3      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004da:	2504      	movs	r5, #4
 80004dc:	e7d1      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004de:	2505      	movs	r5, #5
 80004e0:	e7cf      	b.n	8000482 <HAL_GPIO_Init+0x14a>
 80004e2:	bf00      	nop
 80004e4:	40010400 	.word	0x40010400
 80004e8:	48000400 	.word	0x48000400
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004f0:	b10a      	cbz	r2, 80004f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004f2:	6181      	str	r1, [r0, #24]
 80004f4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004f6:	6281      	str	r1, [r0, #40]	; 0x28
 80004f8:	4770      	bx	lr
	...

080004fc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <HAL_PWREx_GetVoltageRange+0xc>)
 80004fe:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000500:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40007000 	.word	0x40007000

0800050c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800050e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000510:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000514:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000518:	d11c      	bne.n	8000554 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800051a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800051e:	d015      	beq.n	800054c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800052e:	6811      	ldr	r1, [r2, #0]
 8000530:	2232      	movs	r2, #50	; 0x32
 8000532:	434a      	muls	r2, r1
 8000534:	490f      	ldr	r1, [pc, #60]	; (8000574 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8000536:	fbb2 f2f1 	udiv	r2, r2, r1
 800053a:	4619      	mov	r1, r3
 800053c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800053e:	6958      	ldr	r0, [r3, #20]
 8000540:	0540      	lsls	r0, r0, #21
 8000542:	d500      	bpl.n	8000546 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000544:	b922      	cbnz	r2, 8000550 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000546:	694b      	ldr	r3, [r1, #20]
 8000548:	055b      	lsls	r3, r3, #21
 800054a:	d40d      	bmi.n	8000568 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800054c:	2000      	movs	r0, #0
 800054e:	4770      	bx	lr
        wait_loop_index--;
 8000550:	3a01      	subs	r2, #1
 8000552:	e7f4      	b.n	800053e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000554:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000558:	bf1f      	itttt	ne
 800055a:	681a      	ldrne	r2, [r3, #0]
 800055c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000560:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000564:	601a      	strne	r2, [r3, #0]
 8000566:	e7f1      	b.n	800054c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8000568:	2003      	movs	r0, #3
}
 800056a:	4770      	bx	lr
 800056c:	40007000 	.word	0x40007000
 8000570:	20000008 	.word	0x20000008
 8000574:	000f4240 	.word	0x000f4240

08000578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000578:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800057a:	4d1e      	ldr	r5, [pc, #120]	; (80005f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800057c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800057e:	00da      	lsls	r2, r3, #3
{
 8000580:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000582:	d518      	bpl.n	80005b6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000584:	f7ff ffba 	bl	80004fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000588:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800058c:	d123      	bne.n	80005d6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800058e:	2c80      	cmp	r4, #128	; 0x80
 8000590:	d929      	bls.n	80005e6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000592:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000594:	bf8c      	ite	hi
 8000596:	2002      	movhi	r0, #2
 8000598:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800059c:	6813      	ldr	r3, [r2, #0]
 800059e:	f023 0307 	bic.w	r3, r3, #7
 80005a2:	4303      	orrs	r3, r0
 80005a4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80005a6:	6813      	ldr	r3, [r2, #0]
 80005a8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80005ac:	1a18      	subs	r0, r3, r0
 80005ae:	bf18      	it	ne
 80005b0:	2001      	movne	r0, #1
 80005b2:	b003      	add	sp, #12
 80005b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	65ab      	str	r3, [r5, #88]	; 0x58
 80005be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80005c8:	f7ff ff98 	bl	80004fc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80005cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80005ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80005d4:	e7d8      	b.n	8000588 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80005d6:	2c80      	cmp	r4, #128	; 0x80
 80005d8:	d807      	bhi.n	80005ea <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80005da:	d008      	beq.n	80005ee <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80005dc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80005e0:	4258      	negs	r0, r3
 80005e2:	4158      	adcs	r0, r3
 80005e4:	e7d9      	b.n	800059a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80005e6:	2000      	movs	r0, #0
 80005e8:	e7d7      	b.n	800059a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80005ea:	2003      	movs	r0, #3
 80005ec:	e7d5      	b.n	800059a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80005ee:	2002      	movs	r0, #2
 80005f0:	e7d3      	b.n	800059a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <HAL_RCC_GetSysClockFreq+0x8c>)
 80005fe:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000600:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000602:	f012 020c 	ands.w	r2, r2, #12
 8000606:	d005      	beq.n	8000614 <HAL_RCC_GetSysClockFreq+0x18>
 8000608:	2a0c      	cmp	r2, #12
 800060a:	d115      	bne.n	8000638 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800060c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000610:	2901      	cmp	r1, #1
 8000612:	d118      	bne.n	8000646 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000614:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000616:	481d      	ldr	r0, [pc, #116]	; (800068c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000618:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800061a:	bf55      	itete	pl
 800061c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000620:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000622:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000626:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800062a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800062e:	b34a      	cbz	r2, 8000684 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000630:	2a0c      	cmp	r2, #12
 8000632:	d009      	beq.n	8000648 <HAL_RCC_GetSysClockFreq+0x4c>
 8000634:	2000      	movs	r0, #0
  return sysclockfreq;
 8000636:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000638:	2a04      	cmp	r2, #4
 800063a:	d022      	beq.n	8000682 <HAL_RCC_GetSysClockFreq+0x86>
 800063c:	2a08      	cmp	r2, #8
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <HAL_RCC_GetSysClockFreq+0x94>)
 8000640:	bf18      	it	ne
 8000642:	2000      	movne	r0, #0
 8000644:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000646:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800064e:	2a02      	cmp	r2, #2
 8000650:	d015      	beq.n	800067e <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8000652:	490f      	ldr	r1, [pc, #60]	; (8000690 <HAL_RCC_GetSysClockFreq+0x94>)
 8000654:	2a03      	cmp	r2, #3
 8000656:	bf08      	it	eq
 8000658:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800065a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800065c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000664:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000668:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800066c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800066e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000670:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000672:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000674:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8000678:	fbb0 f0f3 	udiv	r0, r0, r3
 800067c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <HAL_RCC_GetSysClockFreq+0x98>)
 8000680:	e7eb      	b.n	800065a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	08000f00 	.word	0x08000f00
 8000690:	007a1200 	.word	0x007a1200
 8000694:	00f42400 	.word	0x00f42400

08000698 <HAL_RCC_OscConfig>:
{
 8000698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800069c:	4605      	mov	r5, r0
 800069e:	b908      	cbnz	r0, 80006a4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e047      	b.n	8000734 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006a4:	4ca6      	ldr	r4, [pc, #664]	; (8000940 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80006a6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006a8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80006aa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80006ac:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006ae:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80006b2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80006b6:	d573      	bpl.n	80007a0 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80006b8:	b11e      	cbz	r6, 80006c2 <HAL_RCC_OscConfig+0x2a>
 80006ba:	2e0c      	cmp	r6, #12
 80006bc:	d152      	bne.n	8000764 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80006be:	2f01      	cmp	r7, #1
 80006c0:	d150      	bne.n	8000764 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	0798      	lsls	r0, r3, #30
 80006c6:	d502      	bpl.n	80006ce <HAL_RCC_OscConfig+0x36>
 80006c8:	69ab      	ldr	r3, [r5, #24]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0e8      	beq.n	80006a0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	6a28      	ldr	r0, [r5, #32]
 80006d2:	0719      	lsls	r1, r3, #28
 80006d4:	bf56      	itet	pl
 80006d6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80006da:	6823      	ldrmi	r3, [r4, #0]
 80006dc:	091b      	lsrpl	r3, r3, #4
 80006de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006e2:	4283      	cmp	r3, r0
 80006e4:	d229      	bcs.n	800073a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80006e6:	f7ff ff47 	bl	8000578 <RCC_SetFlashLatencyFromMSIRange>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d1d8      	bne.n	80006a0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6023      	str	r3, [r4, #0]
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	6a2a      	ldr	r2, [r5, #32]
 80006fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006fe:	4313      	orrs	r3, r2
 8000700:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000702:	6863      	ldr	r3, [r4, #4]
 8000704:	69ea      	ldr	r2, [r5, #28]
 8000706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800070a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800070e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000710:	f7ff ff74 	bl	80005fc <HAL_RCC_GetSysClockFreq>
 8000714:	68a3      	ldr	r3, [r4, #8]
 8000716:	4a8b      	ldr	r2, [pc, #556]	; (8000944 <HAL_RCC_OscConfig+0x2ac>)
 8000718:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800071c:	5cd3      	ldrb	r3, [r2, r3]
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	40d8      	lsrs	r0, r3
 8000724:	4b88      	ldr	r3, [pc, #544]	; (8000948 <HAL_RCC_OscConfig+0x2b0>)
 8000726:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8000728:	4b88      	ldr	r3, [pc, #544]	; (800094c <HAL_RCC_OscConfig+0x2b4>)
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	f7ff fd4c 	bl	80001c8 <HAL_InitTick>
        if(status != HAL_OK)
 8000730:	2800      	cmp	r0, #0
 8000732:	d035      	beq.n	80007a0 <HAL_RCC_OscConfig+0x108>
}
 8000734:	b003      	add	sp, #12
 8000736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6023      	str	r3, [r4, #0]
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000748:	4303      	orrs	r3, r0
 800074a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800074c:	6863      	ldr	r3, [r4, #4]
 800074e:	69ea      	ldr	r2, [r5, #28]
 8000750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000758:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800075a:	f7ff ff0d 	bl	8000578 <RCC_SetFlashLatencyFromMSIRange>
 800075e:	2800      	cmp	r0, #0
 8000760:	d0d6      	beq.n	8000710 <HAL_RCC_OscConfig+0x78>
 8000762:	e79d      	b.n	80006a0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000764:	69ab      	ldr	r3, [r5, #24]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d036      	beq.n	80007d8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000772:	f7ff fd6b 	bl	800024c <HAL_GetTick>
 8000776:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	079a      	lsls	r2, r3, #30
 800077c:	d524      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800077e:	6823      	ldr	r3, [r4, #0]
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6023      	str	r3, [r4, #0]
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	6a2a      	ldr	r2, [r5, #32]
 800078a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800078e:	4313      	orrs	r3, r2
 8000790:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000792:	6863      	ldr	r3, [r4, #4]
 8000794:	69ea      	ldr	r2, [r5, #28]
 8000796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800079a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800079e:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	07d8      	lsls	r0, r3, #31
 80007a4:	d429      	bmi.n	80007fa <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007a6:	682b      	ldr	r3, [r5, #0]
 80007a8:	0799      	lsls	r1, r3, #30
 80007aa:	d467      	bmi.n	800087c <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007ac:	682b      	ldr	r3, [r5, #0]
 80007ae:	0718      	lsls	r0, r3, #28
 80007b0:	f100 809c 	bmi.w	80008ec <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	0759      	lsls	r1, r3, #29
 80007b8:	f100 80ca 	bmi.w	8000950 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80007bc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80007be:	2800      	cmp	r0, #0
 80007c0:	f040 8133 	bne.w	8000a2a <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 80007c4:	2000      	movs	r0, #0
 80007c6:	e7b5      	b.n	8000734 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007c8:	f7ff fd40 	bl	800024c <HAL_GetTick>
 80007cc:	eba0 0008 	sub.w	r0, r0, r8
 80007d0:	2802      	cmp	r0, #2
 80007d2:	d9d1      	bls.n	8000778 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 80007d4:	2003      	movs	r0, #3
 80007d6:	e7ad      	b.n	8000734 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007e0:	f7ff fd34 	bl	800024c <HAL_GetTick>
 80007e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	079b      	lsls	r3, r3, #30
 80007ea:	d5d9      	bpl.n	80007a0 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007ec:	f7ff fd2e 	bl	800024c <HAL_GetTick>
 80007f0:	eba0 0008 	sub.w	r0, r0, r8
 80007f4:	2802      	cmp	r0, #2
 80007f6:	d9f6      	bls.n	80007e6 <HAL_RCC_OscConfig+0x14e>
 80007f8:	e7ec      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80007fa:	2e08      	cmp	r6, #8
 80007fc:	d003      	beq.n	8000806 <HAL_RCC_OscConfig+0x16e>
 80007fe:	2e0c      	cmp	r6, #12
 8000800:	d108      	bne.n	8000814 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000802:	2f03      	cmp	r7, #3
 8000804:	d106      	bne.n	8000814 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	039a      	lsls	r2, r3, #14
 800080a:	d5cc      	bpl.n	80007a6 <HAL_RCC_OscConfig+0x10e>
 800080c:	686b      	ldr	r3, [r5, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1c9      	bne.n	80007a6 <HAL_RCC_OscConfig+0x10e>
 8000812:	e745      	b.n	80006a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000814:	686b      	ldr	r3, [r5, #4]
 8000816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800081a:	d110      	bne.n	800083e <HAL_RCC_OscConfig+0x1a6>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000822:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000824:	f7ff fd12 	bl	800024c <HAL_GetTick>
 8000828:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	039b      	lsls	r3, r3, #14
 800082e:	d4ba      	bmi.n	80007a6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000830:	f7ff fd0c 	bl	800024c <HAL_GetTick>
 8000834:	eba0 0008 	sub.w	r0, r0, r8
 8000838:	2864      	cmp	r0, #100	; 0x64
 800083a:	d9f6      	bls.n	800082a <HAL_RCC_OscConfig+0x192>
 800083c:	e7ca      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800083e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000842:	d104      	bne.n	800084e <HAL_RCC_OscConfig+0x1b6>
 8000844:	6823      	ldr	r3, [r4, #0]
 8000846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084a:	6023      	str	r3, [r4, #0]
 800084c:	e7e6      	b.n	800081c <HAL_RCC_OscConfig+0x184>
 800084e:	6822      	ldr	r2, [r4, #0]
 8000850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000854:	6022      	str	r2, [r4, #0]
 8000856:	6822      	ldr	r2, [r4, #0]
 8000858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800085c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1e0      	bne.n	8000824 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8000862:	f7ff fcf3 	bl	800024c <HAL_GetTick>
 8000866:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	0398      	lsls	r0, r3, #14
 800086c:	d59b      	bpl.n	80007a6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800086e:	f7ff fced 	bl	800024c <HAL_GetTick>
 8000872:	eba0 0008 	sub.w	r0, r0, r8
 8000876:	2864      	cmp	r0, #100	; 0x64
 8000878:	d9f6      	bls.n	8000868 <HAL_RCC_OscConfig+0x1d0>
 800087a:	e7ab      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800087c:	2e04      	cmp	r6, #4
 800087e:	d003      	beq.n	8000888 <HAL_RCC_OscConfig+0x1f0>
 8000880:	2e0c      	cmp	r6, #12
 8000882:	d110      	bne.n	80008a6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000884:	2f02      	cmp	r7, #2
 8000886:	d10e      	bne.n	80008a6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	0559      	lsls	r1, r3, #21
 800088c:	d503      	bpl.n	8000896 <HAL_RCC_OscConfig+0x1fe>
 800088e:	68eb      	ldr	r3, [r5, #12]
 8000890:	2b00      	cmp	r3, #0
 8000892:	f43f af05 	beq.w	80006a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000896:	6863      	ldr	r3, [r4, #4]
 8000898:	692a      	ldr	r2, [r5, #16]
 800089a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800089e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80008a2:	6063      	str	r3, [r4, #4]
 80008a4:	e782      	b.n	80007ac <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008a6:	68eb      	ldr	r3, [r5, #12]
 80008a8:	b17b      	cbz	r3, 80008ca <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008b2:	f7ff fccb 	bl	800024c <HAL_GetTick>
 80008b6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	055a      	lsls	r2, r3, #21
 80008bc:	d4eb      	bmi.n	8000896 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008be:	f7ff fcc5 	bl	800024c <HAL_GetTick>
 80008c2:	1bc0      	subs	r0, r0, r7
 80008c4:	2802      	cmp	r0, #2
 80008c6:	d9f7      	bls.n	80008b8 <HAL_RCC_OscConfig+0x220>
 80008c8:	e784      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008d2:	f7ff fcbb 	bl	800024c <HAL_GetTick>
 80008d6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	f57f af66 	bpl.w	80007ac <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008e0:	f7ff fcb4 	bl	800024c <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9f6      	bls.n	80008d8 <HAL_RCC_OscConfig+0x240>
 80008ea:	e773      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008ec:	696b      	ldr	r3, [r5, #20]
 80008ee:	b19b      	cbz	r3, 8000918 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80008f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80008fc:	f7ff fca6 	bl	800024c <HAL_GetTick>
 8000900:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000902:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000906:	079a      	lsls	r2, r3, #30
 8000908:	f53f af54 	bmi.w	80007b4 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800090c:	f7ff fc9e 	bl	800024c <HAL_GetTick>
 8000910:	1bc0      	subs	r0, r0, r7
 8000912:	2802      	cmp	r0, #2
 8000914:	d9f5      	bls.n	8000902 <HAL_RCC_OscConfig+0x26a>
 8000916:	e75d      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8000918:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800091c:	f023 0301 	bic.w	r3, r3, #1
 8000920:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000924:	f7ff fc92 	bl	800024c <HAL_GetTick>
 8000928:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800092a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800092e:	079b      	lsls	r3, r3, #30
 8000930:	f57f af40 	bpl.w	80007b4 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000934:	f7ff fc8a 	bl	800024c <HAL_GetTick>
 8000938:	1bc0      	subs	r0, r0, r7
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f5      	bls.n	800092a <HAL_RCC_OscConfig+0x292>
 800093e:	e749      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
 8000940:	40021000 	.word	0x40021000
 8000944:	08000ef0 	.word	0x08000ef0
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000950:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000952:	00d8      	lsls	r0, r3, #3
 8000954:	d429      	bmi.n	80009aa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	65a3      	str	r3, [r4, #88]	; 0x58
 800095e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000968:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800096c:	4f79      	ldr	r7, [pc, #484]	; (8000b54 <HAL_RCC_OscConfig+0x4bc>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	05d9      	lsls	r1, r3, #23
 8000972:	d51d      	bpl.n	80009b0 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000974:	68ab      	ldr	r3, [r5, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d12b      	bne.n	80009d2 <HAL_RCC_OscConfig+0x33a>
 800097a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000986:	f7ff fc61 	bl	800024c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800098e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000990:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000994:	079b      	lsls	r3, r3, #30
 8000996:	d542      	bpl.n	8000a1e <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8000998:	f1b8 0f00 	cmp.w	r8, #0
 800099c:	f43f af0e 	beq.w	80007bc <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80009a8:	e708      	b.n	80007bc <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 80009aa:	f04f 0800 	mov.w	r8, #0
 80009ae:	e7dd      	b.n	800096c <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80009b8:	f7ff fc48 	bl	800024c <HAL_GetTick>
 80009bc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	05da      	lsls	r2, r3, #23
 80009c2:	d4d7      	bmi.n	8000974 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c4:	f7ff fc42 	bl	800024c <HAL_GetTick>
 80009c8:	eba0 0009 	sub.w	r0, r0, r9
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d9f6      	bls.n	80009be <HAL_RCC_OscConfig+0x326>
 80009d0:	e700      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d2:	2b05      	cmp	r3, #5
 80009d4:	d106      	bne.n	80009e4 <HAL_RCC_OscConfig+0x34c>
 80009d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80009e2:	e7ca      	b.n	800097a <HAL_RCC_OscConfig+0x2e2>
 80009e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80009e8:	f022 0201 	bic.w	r2, r2, #1
 80009ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80009f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80009f4:	f022 0204 	bic.w	r2, r2, #4
 80009f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1c2      	bne.n	8000986 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8000a00:	f7ff fc24 	bl	800024c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a04:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a08:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000a0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	d5c2      	bpl.n	8000998 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f7ff fc1b 	bl	800024c <HAL_GetTick>
 8000a16:	1bc0      	subs	r0, r0, r7
 8000a18:	4548      	cmp	r0, r9
 8000a1a:	d9f6      	bls.n	8000a0a <HAL_RCC_OscConfig+0x372>
 8000a1c:	e6da      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a1e:	f7ff fc15 	bl	800024c <HAL_GetTick>
 8000a22:	1bc0      	subs	r0, r0, r7
 8000a24:	4548      	cmp	r0, r9
 8000a26:	d9b3      	bls.n	8000990 <HAL_RCC_OscConfig+0x2f8>
 8000a28:	e6d4      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000a2a:	2e0c      	cmp	r6, #12
 8000a2c:	d05c      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 8000a2e:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a30:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a36:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000a38:	d13b      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8000a3a:	f7ff fc07 	bl	800024c <HAL_GetTick>
 8000a3e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	0199      	lsls	r1, r3, #6
 8000a44:	d42f      	bmi.n	8000aa6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a46:	68e2      	ldr	r2, [r4, #12]
 8000a48:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <HAL_RCC_OscConfig+0x4c0>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000a58:	3a01      	subs	r2, #1
 8000a5a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000a5e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a60:	0912      	lsrs	r2, r2, #4
 8000a62:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000a66:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000a68:	0852      	lsrs	r2, r2, #1
 8000a6a:	3a01      	subs	r2, #1
 8000a6c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000a70:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000a72:	0852      	lsrs	r2, r2, #1
 8000a74:	3a01      	subs	r2, #1
 8000a76:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000a7a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a82:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000a84:	68e3      	ldr	r3, [r4, #12]
 8000a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a8a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fbde 	bl	800024c <HAL_GetTick>
 8000a90:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	019a      	lsls	r2, r3, #6
 8000a96:	f53f ae95 	bmi.w	80007c4 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a9a:	f7ff fbd7 	bl	800024c <HAL_GetTick>
 8000a9e:	1b40      	subs	r0, r0, r5
 8000aa0:	2802      	cmp	r0, #2
 8000aa2:	d9f6      	bls.n	8000a92 <HAL_RCC_OscConfig+0x3fa>
 8000aa4:	e696      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aa6:	f7ff fbd1 	bl	800024c <HAL_GetTick>
 8000aaa:	1b80      	subs	r0, r0, r6
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9c7      	bls.n	8000a40 <HAL_RCC_OscConfig+0x3a8>
 8000ab0:	e690      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000ab8:	bf02      	ittt	eq
 8000aba:	68e3      	ldreq	r3, [r4, #12]
 8000abc:	f023 0303 	biceq.w	r3, r3, #3
 8000ac0:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000ac2:	68e3      	ldr	r3, [r4, #12]
 8000ac4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000acc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000ace:	f7ff fbbd 	bl	800024c <HAL_GetTick>
 8000ad2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	019b      	lsls	r3, r3, #6
 8000ad8:	f57f ae74 	bpl.w	80007c4 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000adc:	f7ff fbb6 	bl	800024c <HAL_GetTick>
 8000ae0:	1b40      	subs	r0, r0, r5
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f6      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x43c>
 8000ae6:	e675      	b.n	80007d4 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ae8:	2801      	cmp	r0, #1
 8000aea:	f43f ae23 	beq.w	8000734 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000aee:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000af0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000af2:	f003 0103 	and.w	r1, r3, #3
 8000af6:	4291      	cmp	r1, r2
 8000af8:	f47f add2 	bne.w	80006a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000afc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000afe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000b02:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b04:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000b08:	f47f adca 	bne.w	80006a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b0c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000b12:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000b16:	f47f adc3 	bne.w	80006a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b1a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000b1c:	3a07      	subs	r2, #7
 8000b1e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000b22:	bf18      	it	ne
 8000b24:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b26:	4291      	cmp	r1, r2
 8000b28:	f47f adba 	bne.w	80006a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000b2e:	0852      	lsrs	r2, r2, #1
 8000b30:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000b34:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b36:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000b3a:	f47f adb1 	bne.w	80006a0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000b3e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000b40:	0852      	lsrs	r2, r2, #1
 8000b42:	3a01      	subs	r2, #1
 8000b44:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b48:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8000b4c:	bf14      	ite	ne
 8000b4e:	2001      	movne	r0, #1
 8000b50:	2000      	moveq	r0, #0
 8000b52:	e5ef      	b.n	8000734 <HAL_RCC_OscConfig+0x9c>
 8000b54:	40007000 	.word	0x40007000
 8000b58:	f99d808c 	.word	0xf99d808c

08000b5c <HAL_RCC_ClockConfig>:
{
 8000b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b60:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8000b62:	4604      	mov	r4, r0
 8000b64:	b910      	cbnz	r0, 8000b6c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
 8000b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b6c:	4a41      	ldr	r2, [pc, #260]	; (8000c74 <HAL_RCC_ClockConfig+0x118>)
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d32a      	bcc.n	8000bce <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	07d9      	lsls	r1, r3, #31
 8000b7c:	d432      	bmi.n	8000be4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b7e:	6821      	ldr	r1, [r4, #0]
 8000b80:	078a      	lsls	r2, r1, #30
 8000b82:	d45c      	bmi.n	8000c3e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b84:	4a3b      	ldr	r2, [pc, #236]	; (8000c74 <HAL_RCC_ClockConfig+0x118>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	429e      	cmp	r6, r3
 8000b8e:	d35e      	bcc.n	8000c4e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b90:	f011 0f04 	tst.w	r1, #4
 8000b94:	4d38      	ldr	r5, [pc, #224]	; (8000c78 <HAL_RCC_ClockConfig+0x11c>)
 8000b96:	d165      	bne.n	8000c64 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b98:	070b      	lsls	r3, r1, #28
 8000b9a:	d506      	bpl.n	8000baa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b9c:	68ab      	ldr	r3, [r5, #8]
 8000b9e:	6922      	ldr	r2, [r4, #16]
 8000ba0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ba4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ba8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000baa:	f7ff fd27 	bl	80005fc <HAL_RCC_GetSysClockFreq>
 8000bae:	68ab      	ldr	r3, [r5, #8]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_RCC_ClockConfig+0x120>)
 8000bb2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000bba:	5cd3      	ldrb	r3, [r2, r3]
 8000bbc:	f003 031f 	and.w	r3, r3, #31
 8000bc0:	40d8      	lsrs	r0, r3
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_RCC_ClockConfig+0x124>)
 8000bc4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_RCC_ClockConfig+0x128>)
 8000bc8:	6818      	ldr	r0, [r3, #0]
 8000bca:	f7ff bafd 	b.w	80001c8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	f023 0307 	bic.w	r3, r3, #7
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd8:	6813      	ldr	r3, [r2, #0]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d1c1      	bne.n	8000b66 <HAL_RCC_ClockConfig+0xa>
 8000be2:	e7c9      	b.n	8000b78 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000be4:	6862      	ldr	r2, [r4, #4]
 8000be6:	4d24      	ldr	r5, [pc, #144]	; (8000c78 <HAL_RCC_ClockConfig+0x11c>)
 8000be8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000bea:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bec:	d11b      	bne.n	8000c26 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000bee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000bf2:	d0b8      	beq.n	8000b66 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000bf4:	68ab      	ldr	r3, [r5, #8]
 8000bf6:	f023 0303 	bic.w	r3, r3, #3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8000bfe:	f7ff fb25 	bl	800024c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c02:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c06:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c08:	68ab      	ldr	r3, [r5, #8]
 8000c0a:	6862      	ldr	r2, [r4, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c14:	d0b3      	beq.n	8000b7e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c16:	f7ff fb19 	bl	800024c <HAL_GetTick>
 8000c1a:	1bc0      	subs	r0, r0, r7
 8000c1c:	4540      	cmp	r0, r8
 8000c1e:	d9f3      	bls.n	8000c08 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8000c20:	2003      	movs	r0, #3
}
 8000c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c26:	2a02      	cmp	r2, #2
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c2e:	e7e0      	b.n	8000bf2 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000c30:	b912      	cbnz	r2, 8000c38 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c32:	f013 0f02 	tst.w	r3, #2
 8000c36:	e7dc      	b.n	8000bf2 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c38:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000c3c:	e7d9      	b.n	8000bf2 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_RCC_ClockConfig+0x11c>)
 8000c40:	68a0      	ldr	r0, [r4, #8]
 8000c42:	6893      	ldr	r3, [r2, #8]
 8000c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c48:	4303      	orrs	r3, r0
 8000c4a:	6093      	str	r3, [r2, #8]
 8000c4c:	e79a      	b.n	8000b84 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	f023 0307 	bic.w	r3, r3, #7
 8000c54:	4333      	orrs	r3, r6
 8000c56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d181      	bne.n	8000b66 <HAL_RCC_ClockConfig+0xa>
 8000c62:	e795      	b.n	8000b90 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c64:	68ab      	ldr	r3, [r5, #8]
 8000c66:	68e2      	ldr	r2, [r4, #12]
 8000c68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60ab      	str	r3, [r5, #8]
 8000c70:	e792      	b.n	8000b98 <HAL_RCC_ClockConfig+0x3c>
 8000c72:	bf00      	nop
 8000c74:	40022000 	.word	0x40022000
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	08000ef0 	.word	0x08000ef0
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8c:	2244      	movs	r2, #68	; 0x44
 8000c8e:	2100      	movs	r1, #0
 8000c90:	a805      	add	r0, sp, #20
 8000c92:	f000 f919 	bl	8000ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c96:	2214      	movs	r2, #20
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4668      	mov	r0, sp
 8000c9c:	f000 f914 	bl	8000ec8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cae:	f7ff fcf3 	bl	8000698 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cb2:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000cba:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc2:	f7ff ff4b 	bl	8000b5c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cca:	f7ff fc1f 	bl	800050c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8000cce:	b017      	add	sp, #92	; 0x5c
 8000cd0:	f85d fb04 	ldr.w	pc, [sp], #4

08000cd4 <main>:
{
 8000cd4:	b500      	push	{lr}
 8000cd6:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000cd8:	f7ff fa9c 	bl	8000214 <HAL_Init>
  SystemClock_Config();
 8000cdc:	f7ff ffd4 	bl	8000c88 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	2214      	movs	r2, #20
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	a803      	add	r0, sp, #12
 8000ce6:	f000 f8ef 	bl	8000ec8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cea:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <main+0xc0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000cec:	482a      	ldr	r0, [pc, #168]	; (8000d98 <main+0xc4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf0:	f042 0210 	orr.w	r2, r2, #16
 8000cf4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf8:	f002 0210 	and.w	r2, r2, #16
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d02:	f042 0202 	orr.w	r2, r2, #2
 8000d06:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000d16:	f7ff fbeb 	bl	80004f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <main+0xc8>)
 8000d22:	f7ff fbe5 	bl	80004f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED8_Pin */
  GPIO_InitStruct.Pin = LED8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = LED8_Pin;
 8000d28:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	a903      	add	r1, sp, #12
 8000d2e:	481a      	ldr	r0, [pc, #104]	; (8000d98 <main+0xc4>)
  GPIO_InitStruct.Pin = LED8_Pin;
 8000d30:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f7ff fafe 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d40:	a903      	add	r1, sp, #12
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <main+0xc8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d4a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f7ff faf4 	bl	8000338 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d50:	4d12      	ldr	r5, [pc, #72]	; (8000d9c <main+0xc8>)
	  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000d52:	4c11      	ldr	r4, [pc, #68]	; (8000d98 <main+0xc4>)
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f7ff fbc8 	bl	80004f0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f7ff fa78 	bl	8000258 <HAL_Delay>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d68:	4628      	mov	r0, r5
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d70:	f7ff fbbe 	bl	80004f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff fbb9 	bl	80004f0 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f7ff fa69 	bl	8000258 <HAL_Delay>
	  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff fbb0 	bl	80004f0 <HAL_GPIO_WritePin>
 8000d90:	e7e0      	b.n	8000d54 <main+0x80>
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48001000 	.word	0x48001000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_MspInit+0x2c>)
 8000da2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da4:	f042 0201 	orr.w	r2, r2, #1
 8000da8:	661a      	str	r2, [r3, #96]	; 0x60
 8000daa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000dac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	f002 0201 	and.w	r2, r2, #1
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000db8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc8:	b002      	add	sp, #8
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler>

08000dda <SVC_Handler>:
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f7ff ba28 	b.w	8000234 <HAL_IncTick>

08000de4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	490f      	ldr	r1, [pc, #60]	; (8000e24 <SystemInit+0x40>)
 8000de6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000dea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <SystemInit+0x44>)
 8000df4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000df6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8000df8:	f042 0201 	orr.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8000dfe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000e06:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e18:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e1a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	40021000 	.word	0x40021000

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e32:	e003      	b.n	8000e3c <LoopCopyDataInit>

08000e34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e3a:	3104      	adds	r1, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e44:	d3f6      	bcc.n	8000e34 <CopyDataInit>
	ldr	r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e48:	e002      	b.n	8000e50 <LoopFillZerobss>

08000e4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e4c:	f842 3b04 	str.w	r3, [r2], #4

08000e50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <LoopForever+0x16>)
	cmp	r2, r3
 8000e52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e54:	d3f9      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e56:	f7ff ffc5 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f000 f811 	bl	8000e80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff ff39 	bl	8000cd4 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e64:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e68:	08000f38 	.word	0x08000f38
	ldr	r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e70:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000e78:	2000002c 	.word	0x2000002c

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <__libc_init_array>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	4e0d      	ldr	r6, [pc, #52]	; (8000eb8 <__libc_init_array+0x38>)
 8000e84:	4c0d      	ldr	r4, [pc, #52]	; (8000ebc <__libc_init_array+0x3c>)
 8000e86:	1ba4      	subs	r4, r4, r6
 8000e88:	10a4      	asrs	r4, r4, #2
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	d109      	bne.n	8000ea4 <__libc_init_array+0x24>
 8000e90:	4e0b      	ldr	r6, [pc, #44]	; (8000ec0 <__libc_init_array+0x40>)
 8000e92:	4c0c      	ldr	r4, [pc, #48]	; (8000ec4 <__libc_init_array+0x44>)
 8000e94:	f000 f820 	bl	8000ed8 <_init>
 8000e98:	1ba4      	subs	r4, r4, r6
 8000e9a:	10a4      	asrs	r4, r4, #2
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	42a5      	cmp	r5, r4
 8000ea0:	d105      	bne.n	8000eae <__libc_init_array+0x2e>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}
 8000ea4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea8:	4798      	blx	r3
 8000eaa:	3501      	adds	r5, #1
 8000eac:	e7ee      	b.n	8000e8c <__libc_init_array+0xc>
 8000eae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb2:	4798      	blx	r3
 8000eb4:	3501      	adds	r5, #1
 8000eb6:	e7f2      	b.n	8000e9e <__libc_init_array+0x1e>
 8000eb8:	08000f30 	.word	0x08000f30
 8000ebc:	08000f30 	.word	0x08000f30
 8000ec0:	08000f30 	.word	0x08000f30
 8000ec4:	08000f34 	.word	0x08000f34

08000ec8 <memset>:
 8000ec8:	4402      	add	r2, r0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d100      	bne.n	8000ed2 <memset+0xa>
 8000ed0:	4770      	bx	lr
 8000ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ed6:	e7f9      	b.n	8000ecc <memset+0x4>

08000ed8 <_init>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr

08000ee4 <_fini>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr
